{
  "points": [
    {
      "methods": [
        "org.bukkit.plugin.SimplePluginManager.callEvent()"
      ],
      "threads": [],
      "description": "Invokes an event in the Bukkit plugin framework, allowing plugins to react to specific occurrences within the game environment."
    },
    {
      "methods": [],
      "threads": [
        "/^Craft Scheduler Thread.*$/"
      ],
      "description": "These threads are used by Bukkit plugins to run asynchronous tasks. Usually processing done within these tasks does not affect the game/server performance too much, as long as the overall system is not low on CPU resources."
    },
    {
      "methods": [
        "sun.misc.Unsafe.park()",
        "jdk.internal.misc.Unsafe.park()"
      ],
      "threads": [],
      "description": "Temporarily suspends a part of the program until further action, typically for internal processes."
    },
    {
      "methods": [
        "java.lang.Thread.sleep()",
        "java.util.concurrent.locks.LockSupport.parkNanos()"
      ],
      "threads": [],
      "description": "Causes the program to pause execution for a specified duration. While paused, no processing is taking place.<br>Context is required to understand whether this is good or bad. If the program is &quot;busy waiting&quot; for another thing to happen (e.g. another Thread to do something or an I/O operation), it may cause the program to slow down. In other cases, (e.g. if seen at the root of the Minecraft server tick loop), it is probably good news! See the <a target=\"_blank\" href=\"https://spark.lucko.me/docs/guides/The-tick-loop\">tick loop guide</a> for more info."
    },
    {
      "methods": [
        "java.lang.Thread.run()"
      ],
      "threads": [],
      "description": "Marks the starting point of execution for a particular part of the program. The first child node will usually always be this, just keep expanding!"
    },
    {
      "methods": [],
      "threads": [
        "Server thread"
      ],
      "description": "The main server thread that the game loop is executed on. See the <a target=\"_blank\" href=\"https://spark.lucko.me/docs/guides/The-tick-loop\">Tick Loop guide</a> for more info."
    },
    {
      "methods": [
        "net.minecraft.server.MinecraftServer.run()",
        "net.minecraft.server.MinecraftServer.runServer()"
      ],
      "threads": [],
      "description": "The root of the Minecraft server activity."
    },
    {
      "methods": [
        "net.minecraft.server.MinecraftServer.waitUntilNextTick()",
        "net.minecraft.server.IAsyncTaskHandler.sleepForTick()"
      ],
      "threads": [],
      "description": "Usually, this is the server &quot;sleeping&quot; (waiting to process the next game tick). Sometimes this section is also used to execute scheduled tasks."
    },
    {
      "methods": [
        "net.minecraft.server.MinecraftServer.pollTask()"
      ],
      "threads": [],
      "description": "Pauses the server briefly until the pending background tasks are completed."
    },
    {
      "methods": [
        "net.minecraft.server.TickTask.run()"
      ],
      "threads": [],
      "description": "Runs a specific task which needs to happen regularly within the server (e.g. every x ticks)."
    },
    {
      "methods": [
        "net.minecraft.network.protocol.PlayerConnectionUtils.run()"
      ],
      "threads": [],
      "description": "Manages player (client) connections to the server, in particular the processing of incoming packets (actions performed by players)."
    },
    {
      "methods": [
        "net.minecraft.server.MinecraftServer.tickServer()"
      ],
      "threads": [],
      "description": "Manages the continuous update cycle of the Minecraft server, handling various server-side tasks and operations."
    },
    {
      "methods": [
        "net.minecraft.server.level.WorldServer.tick()"
      ],
      "threads": [],
      "description": "Controls the ongoing update process for a specific Minecraft world, handling changes and events within that world."
    },
    {
      "methods": [
        "net.minecraft.world.level.entity.EntityTickList.forEach()"
      ],
      "threads": [],
      "description": "Iterates over entities within a Minecraft world to update their status and behaviors according to the current game tick."
    },
    {
      "methods": [
        "net.minecraft.world.level.World.tickBlockEntities()"
      ],
      "threads": [],
      "description": "Updates and manages block entities within a Minecraft world, ensuring they behave correctly and remain synchronized."
    },
    {
      "methods": [
        "net.minecraft.world.ticks.TickListServer.tick()"
      ],
      "threads": [],
      "description": "Manages the ticking process for various game elements on the server side, ensuring timely updates and synchronization."
    },
    {
      "methods": [
        "net.minecraft.server.level.WorldServer.tickNonPassenger()"
      ],
      "threads": [],
      "description": "Handles the update process for entities within a Minecraft world, excluding those that are passengers on other entities."
    },
    {
      "methods": [
        "net.minecraft.server.level.ChunkProviderServer.tickChunks()"
      ],
      "threads": [],
      "description": "Controls the update process for chunks within the Minecraft server, ensuring they remain loaded and updated as necessary."
    },
    {
      "methods": [
        "net.minecraft.server.level.PlayerChunkMap.tick()"
      ],
      "threads": [],
      "description": "Manages the update process for player-related chunks within the Minecraft server, ensuring they are loaded and updated correctly."
    },
    {
      "methods": [
        "net.minecraft.server.level.WorldServer.tickChunk()"
      ],
      "threads": [],
      "description": "Handles the update process for a specific chunk within a Minecraft world, ensuring its contents remain synchronized and updated."
    },
    {
      "methods": [
        "net.minecraft.world.entity.ai.goal.PathfinderGoalSelector.tick()"
      ],
      "threads": [],
      "description": "Manages the update process for pathfinding goals for entities in the Minecraft world, ensuring they behave according to their assigned goals."
    },
    {
      "methods": [
        "net.minecraft.server.network.ServerConnection.tick()"
      ],
      "threads": [],
      "description": "Controls the ongoing update process for the server&#39;s network connection, managing incoming and outgoing data."
    },
    {
      "methods": [
        "net.minecraft.network.NetworkManager.tick()"
      ],
      "threads": [],
      "description": "Manages the network communication within the Minecraft server, handling the sending and receiving of data packets."
    },
    {
      "methods": [
        "net.minecraft.server.ServerFunctionManager.tick()"
      ],
      "threads": [],
      "description": "Deals with functions from datapacks that are executed repeatedly. To find out which datapacks or functions are expensive, you may use the <a target=\"_blank\" href=\"https://minecraft.wiki/w/Commands/perf\">/perf</a> command from Minecraft."
    },
    {
      "methods": [
        "net.minecraft.server.network.PlayerConnection.handleMovePlayer()"
      ],
      "threads": [],
      "description": "Handles player movement events within the server, ensuring that player positions are updated correctly."
    },
    {
      "methods": [
        "net.minecraft.server.level.EntityTrackerEntry.sendChanges()"
      ],
      "threads": [],
      "description": "Sends updates and changes to tracked entities within the Minecraft server to synchronize their states with clients."
    },
    {
      "methods": [
        "net.minecraft.world.level.chunk.Chunk.getBlockState()"
      ],
      "threads": [],
      "description": "Retrieves the state of a block within a specific chunk in the Minecraft world, providing information about its type and properties."
    },
    {
      "methods": [
        "net.minecraft.world.inventory.Container.broadcastChanges()"
      ],
      "threads": [],
      "description": "Notifies all players with access to a container (e.g., chest, inventory) about changes made to its contents."
    },
    {
      "methods": [
        "net.minecraft.network.NetworkManager.sendPacket()"
      ],
      "threads": [],
      "description": "Sends a data packet over the network within the Minecraft server, allowing communication between server and client components."
    },
    {
      "methods": [],
      "threads": [
        "spark-monitoring-thread"
      ],
      "description": "This thread is used by spark to periodically collect certain <a target=\"_blank\" href=\"https://spark.lucko.me/docs/misc/About-spark-metrics\">metrics</a> from the server."
    },
    {
      "methods": [],
      "threads": [
        "spark-async-sampler-worker-thread"
      ],
      "description": "This thread is responsible for collecting the data you&#39;re looking at right now!"
    }
  ]
}